- <Befehl> -help / --h / --help     oder     man <Befehl>     oder     info <Befehl>
- Redirection in Dateien > output
- Lesen aus Dateien < input
- leere Datei: /dev/null
- mehrere Kommandos in einer Zeile mit ; trennen
- Wildcards: * - beliebige Zeichen; ? - genau ein beliebiges Zeichen; [Zeichenmenge] - beliebiges Zeichen aus Menge ([Aa], [a-c], [!a-z], ); 
- Zeilenumbruch für lange Befehle mit \ am Zeilenende
- Programmabbruch durch Strg-C
- Standardeingabe abbrechen durch Strg-D
- Kombinieren von mehreren Kommandos mit Pipe | ; cmd1 | cmd2 verbindet Ausgang von cmd1 mit Eingang von cmd2
            - Standard-Output oder -Error können gezielt in die Pipe geschickt werden via "m>&n" (S. 53)
- Command Substituation via cmd1 $(cmd2) --> die Ausgabe von cmd2 dient als Parameter für cmd1

Befehle:
- cat (= concat)    # Concatenate File(s) to standard output
- cp                # copy source(s) to dest(n)
- cut               # cuts out fields, bytes or chars from file?; needs parameter -f (fields), -b (bytes) or -c (chars); --complement inverts logic
- echo              # print arguments
- grep              # search pattern / RegEx in lines
- head              # show first lines of file
- sort              # Write sorted concatenation of all FILE(s) to standard output.
- tail              # show last lines of file
- uniq              # removes duplicate lines

Skripte erstellen
- Start des Skripts immer mit shebang #!, gefolgt von /bin/bash als zuständigem Interpreter des Skripts
